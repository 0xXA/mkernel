#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019 Yuvraj Saxena <infectedx27@gmail.com> @TheInfected
#
# Kernel building script and handling it afterwards.

set -e -o pipefail -u
umask 0077

set -a 
MKERNEL_PROGRAM="$(basename "${0}")"
MKERNEL_VERSION="0.1-Alpha"
MKERNEL_ACTION="build_kernel"
MKERNEL_DISABLE_STDOUT=""
MKERNEL_KERNEL_IMG="Image.gz-dtb"
MKERNEL_PROP_FILE="mkernel.cfg"
MKERNEL_TOP_DIR="${HOME}/.mkernel"
MKERNEL_PROP_DIR="`pwd`"
MKERNEL_BUILD_DIR=""
MKERNEL_ENABLE_DEBUG_BUILD=""
MKERNEL_DEFCONFIG=""
set +a

trap '' QUIT
trap '' EXIT
trap 'abort' HUP INT TERM

function debug_build {
	set -x
	PS4='$LINENO '
}

function pr_info { 
	printf "%b" "\\e[2K\\r\\e[1;32m[\\e[1;31m!\\e[1;32m]\\e[1;36m\t$1\\e[0m\n"
}

function pr_err { 
	printf "%b" "\\e[2K\\r\\e[1;32m[\\e[1;31m!\\e[1;32m]\\e[1;36m\t$1\\e[0m\n"
	exit
}

function check_shell {
	[[ -z "${BASH}" ]] || [[ ${BASH_VERSINFO} < 4 ]] && \
		pr_err "This script can only be executed in bash 4+"
}

function get_manifest {
	[[ ! -e "${MKERNEL_PROP_FILE}" ]] && {
		: $(find ${HOME} -name "${MKERNEL_PROP_FILE}")
		[[ ! -e "${_:?}" ]] && pr_err "${MKERNEL_PROP_FILE} can't be located, is it even exist's ?"
		MKERNEL_PROP_FILE="${_}"
	}
}

function read_manifest {
	if bash -n "${MKERNEL_PROP_FILE}"; then
		set -a
		. "${MKERNEL_PROP_FILE}"
		set +a
	else
		pr_err "Error: your manifest file contains syntax errors. Please, fix them."
	fi
}

function build_kernel {
	check_shell
	get_manifest
	read_manifest

	[[ ! -e ${MKERNEL_TOP_DIR} ]] && \
		mkdir -p ${MKERNEL_TOP_DIR}

	exec {KBUILD_LOCK}>"${MKERNEL_TOP_DIR}/.mkernel.lock"
	if ! flock -n "${KBUILD_LOCK}"; then
		pr_err "Error: another build process for package ${MKERNEL_KERNEL_NAME} is running."
	fi
	
	[[ -z "${MKERNEL_BUILD_DIR}" ]] && {
		MKERNEL_BUILD_DIR="${MKERNEL_TOP_DIR}/${MKERNEL_DEFCONFIG/_*}"
	        [[ ! -e "${MKERNEL_BUILD_DIR}" ]] && \
			mkdir -p ${MKERNEL_BUILD_DIR}
	}

        [[ -n "${MKERNEL_KSOURCE_URL}" ]] && {
		download_archieve "${MKERNEL_KSOURCE_URL}" "${MKERNEL_BUILD_DIR}"
	}
	if [[ -n "${MKERNEL_CREATE_LOGFILE}" ]];then 
		make -j${MKERNEL_USE_CORES:-$(nproc)} O=${MKERNEL_BUILD_DIR} ${MKERNEL_DEFCONFIG:?}
		make -j${MKERNEL_USE_CORES:-$(nproc)} O=${MKERNEL_BUILD_DIR}
	else
		make -j${MKERNEL_USE_CORES:-$(nproc)} O=${MKERNEL_BUILD_DIR} ${MKERNEL_DEFCONFIG:?} &>> ${MKERNEL_DEFCONFIG}.log
		make -j${MKERNEL_USE_CORES:-$(nproc)} O=${MKERNEL_BUILD_DIR} &>> ${MKERNEL_DEFCONFIG/_*}_kernel.log
	fi
	flock -u "${KBUILD_LOCK}"
}

function clean {
	make -j${NUM_CORES:-$(nproc)} O=${MKERNEL_BUILD_DIR} clean
}

function abort {
	if [[ -n "${MKERNEL_PRESERVE_BUILD_DIR}" ]]; then
		pr_err " error: Interrupt Caught"
	else
		rm -rf ${MKERNEL_BUILD_DIR}
		pr_err " error: Interrupt Caught"
	fi
}

function kinfo {
	local KIMG="$(find "${MKERNEL_BUILD_DIR}" -type f -name ${MKERNEL_KERNEL_IMG})"
	[[ -n "${KIMG}" ]] && {
		cp ${KIMG} `pwd`/
		set -a
	                MKERNEL_KERNEL_IMG="`pwd`/${MKERNEL_KERNEL_IMG}"
		        MKERNEL_KERNEL_SHA1=$(openssl dgst -sha1 ${KIMG}|sed 's/SHA1.*= //')
			MKERNEL_KERNEL_SHA256=$(openssl dgst -sha256 ${KIMG}|sed 's/SHA256.*= //')
			MKERNEL_KERNEL_MD5=$(openssl dgst -md5 ${KIMG}|sed 's/MD5.*= //')
		set +a
	}
}

function download_archieve {
	local URL=${1}
	local DPATH=${2}
	
	if ! grep -qP '^/.*' <<< "${DPATH:?}"; then
		pr_err "download: destination path should be absolute."
	fi

	[[ -d "${DPATH+x}" ]] && \
		pr_err "download: destination path ${DPATH} is a directory."
	rm "${DPATH}/.tmp"
	
	trap 'pr_err "Interrupt encountered aborting..."; reset_title; rm -f "${DPATH}.tmp"; abort;' HUP INT TERM
	
	if curl \
		--progress \
		--location \
		--fail \
		--output "${DPATH}.tmp" \
		"${URL:?}"; then
			printf '%b' "\\e[1A\\e[2K\\r" >&2
			mv -f "${DPATH}.tmp" "${DPATH}"
		else
			rm -f "${DPATH}.tmp"
			pr_err "Error: failed to download ${URL}."
		fi
		trap 'abort' HUP INT TERM
}

function success {
{
	kinfo
	printf '\t%s\n\n' "THIS FILE IS AUTOGENERATED DON'T EDIT"
	printf '%s\n' "KERNEL="${MKERNEL_KERNEL_IMG:-}""
	printf '%s\n' "KERNEL_SHA1=${MKERNEL_KERNEL_SHA1:-}"
	printf '%s\n' "KERNEL_SHA256=${MKERNEL_KERNEL_SHA256:-}"
	printf '%s\n' "KERNEL_MD5=${MKERNEL_KERNEL_MD5:-}"
} >> "GENERATED_KERNEL.info"
}

while getopts "cdfh:pqv" ARG; do
	case "${ARG}" in
		c) MKERNEL_CREATE_FLASHABLE_ZIP="true";;
		d) MKERNEL_ENABLE_DEBUG_BUILD="true";;
		f) MKERNEL_FORCE_REBUILD="true";;
		h) MKERNEL_ACTION="show_help";;
		p) MKERNEL_PROP_FILE="${OPTARG}";;
		q) MKERNEL_DISABLE_STDOUT="true";;
		v) MKERNEL_ACTION="show_version";;
		*) pr_err "Error: invalid option: ${MKERNEL_PROGRAM} '${ARG}'";;
	esac
done

readonly MKERNEL_ACTION
readonly MKERNEL_DISABLE_STDOUT
readonly MKERNEL_ENABLE_DEBUG_BUILD
readonly MKERNEL_CREATE_FLASHABLE_ZIP
readonly MKERNEL_FORCE_REBUILD
readonly MKERNEL_PROP_FILE

unset OPTARG
unset OPTIND
unset ARG

[[ -n "${MKERNEL_DISABLE_STDOUT}" ]] && \
	exec 1>/dev/null
[[ -n "${MKERNEL_ENABLE_DEBUG_BUILD}" ]] && \
	debug_build

case "${MKERNEL_ACTION}" in
	build_kernel) build_kernel;;
	show_help)
cat << STDOUT
Usage: ${MKERNEL_PROGRAM} [OPTIONS]

A tool for building kernels standalone

Options:

-d      Enable debug options for compilation.
-f      Force overwrite already built packages.
-g      Compute checksums for source files.
-h      Show usage and exit.
-q      Suppress everything that is printed to stdout. This makes build logs much less verbose but errors may still be shown.
-D      download files from URLs instead of using from current directory."
-v      Show version information and exit.
STDOUT
        ;;
    show_version)
cat << STDOUT
                  makekernel ${MKERNEL_VERSION}

Copyright (C) 2019 Yuvraj Saxena <infectedx27@gmail.com> @TheInfected

This is free software see the source for copying conditions. There is NO warranty not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
STDOUT
        ;;
    *)
        pr_err "Error: Unknown action '${MKERNEL_ACTION}' requested."
        ;;
esac
